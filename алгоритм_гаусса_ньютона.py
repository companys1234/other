# -*- coding: utf-8 -*-
"""алгоритм гаусса-ньютона

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZiOmSh9poI7-xu8WBz5G0I3zvCFQpkz
"""

import numpy as np

def gauss_newton(f, jacobian, beta0, x, y, max_iter=100, tol=1e-6):
    beta = beta0.copy()

    for _ in range(max_iter):
        # Вычисляем остатки и Якобиан
        r = y - f(x, beta)
        J = jacobian(x, beta)

        # Решаем систему (J^T J) delta = J^T r
        delta = np.linalg.solve(J.T @ J, J.T @ r)

        # Обновляем параметры
        beta_new = beta + delta

        # Проверяем условие сходимости
        if np.linalg.norm(delta) < tol:
            break

        beta = beta_new

    return beta

# Пример использования
def model(x, beta):
    return beta[0] * np.exp(beta[1] * x)

def jacobian(x, beta):
    b0, b1 = beta
    df_db0 = np.exp(b1 * x)          # Производная по beta0
    df_db1 = b0 * x * np.exp(b1 * x) # Производная по beta1
    return np.column_stack((df_db0, df_db1))

# Данные
x_data = np.array([0, 1, 2, 3, 4])
y_data = np.array([1.0, 0.9, 0.8, 0.7, 0.6])

# Начальное приближение
beta0 = np.array([1.0, -0.1])

# Подгонка модели
beta_opt = gauss_newton(model, jacobian, beta0, x_data, y_data)
print("Оптимальные параметры:", beta_opt)